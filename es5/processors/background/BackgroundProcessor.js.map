{"version":3,"file":"BackgroundProcessor.js","sourceRoot":"","sources":["../../../lib/processors/background/BackgroundProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Processor } from '../Processor';\nimport { Benchmark } from '../../utils/Benchmark';\nimport { version } from '../../utils/version';\nimport { Dimensions, Pipeline, WebGL2PipelineType } from '../../types';\nimport { buildWebGL2Pipeline } from '../webgl2';\n\nimport {\n  DEBOUNCE_COUNT,\n  HISTORY_COUNT_MULTIPLIER,\n  MASK_BLUR_RADIUS,\n  MODEL_NAME,\n  PERSON_PROBABILITY_THRESHOLD,\n  TFLITE_LOADER_NAME,\n  TFLITE_SIMD_LOADER_NAME,\n  WASM_INFERENCE_DIMENSIONS,\n} from '../../constants';\n\n/**\n * @private\n */\nexport interface BackgroundProcessorOptions {\n  /**\n   * The VideoProcessors load assets dynamically depending on certain browser features.\n   * You need to serve all the assets and provide the root path so they can be referenced properly.\n   * These assets can be copied from the `dist/build` folder which you can add as part of your deployment process.\n   * @example\n   * <br/>\n   * <br/>\n   * For virtual background:\n   * <br/>\n   *\n   * ```ts\n   * const virtualBackground = new VirtualBackgroundProcessor({\n   *   assetsPath: 'https://my-server-path/assets',\n   *   backgroundImage: img,\n   * });\n   * await virtualBackground.loadModel();\n   * ```\n   *\n   * <br/>\n   * For blur background:\n   * <br/>\n   *\n   * ```ts\n   * const blurBackground = new GaussianBlurBackgroundProcessor({\n   *   assetsPath: 'https://my-server-path/assets'\n   * });\n   * await blurBackground.loadModel();\n   * ```\n   */\n  assetsPath: string;\n\n  /**\n   * Whether to skip processing every other frame to improve the output frame rate, but reducing accuracy in the process.\n   * @default\n   * ```html\n   * true\n   * ```\n   */\n  debounce?: boolean;\n\n  /**\n   * @private\n   */\n  inferenceDimensions?: Dimensions;\n\n  /**\n   * The blur radius to use when smoothing out the edges of the person's mask.\n   * @default\n   * ```html\n   * 5\n   * ```\n   */\n  maskBlurRadius?: number;\n\n  /**\n   * @private\n   */\n  personProbabilityThreshold?: number;\n\n  /**\n   * Specifies which pipeline to use when processing video frames.\n   * @default\n   * ```html\n   * 'WebGL2'\n   * ```\n   */\n  pipeline?: Pipeline;\n}\n\n/**\n * @private\n */\nexport abstract class BackgroundProcessor extends Processor {\n  private static _loadedScripts: string[] = [];\n\n  protected _backgroundImage: HTMLImageElement | null = null;\n  protected _outputCanvas: HTMLCanvasElement | null = null;\n  protected _outputContext: CanvasRenderingContext2D | WebGL2RenderingContext | null = null;\n  protected _webgl2Pipeline: ReturnType<typeof buildWebGL2Pipeline> | null = null;\n\n  private _assetsPath: string;\n  private _benchmark: Benchmark;\n  private _currentMask: Uint8ClampedArray | Uint8Array = new Uint8ClampedArray();\n  private _debounce: boolean = true;\n  private _debounceCount: number = DEBOUNCE_COUNT;\n  private _dummyImageData: ImageData = new ImageData(1, 1);\n  private _historyCount: number;\n  private _inferenceDimensions: Dimensions = WASM_INFERENCE_DIMENSIONS;\n  private _inputCanvas: HTMLCanvasElement;\n  private _inputContext: CanvasRenderingContext2D;\n  private _inputMemoryOffset: number = 0;\n  // tslint:disable-next-line no-unused-variable\n  private _isSimdEnabled: boolean | null = null;\n  private _maskBlurRadius: number = MASK_BLUR_RADIUS;\n  private _maskCanvas: OffscreenCanvas | HTMLCanvasElement;\n  private _maskContext: OffscreenCanvasRenderingContext2D | CanvasRenderingContext2D;\n  private _masks: (Uint8ClampedArray | Uint8Array)[];\n  private _maskUsageCounter: number = 0;\n  private _outputMemoryOffset: number = 0;\n  private _personProbabilityThreshold: number = PERSON_PROBABILITY_THRESHOLD;\n  private _pipeline: Pipeline = Pipeline.WebGL2;\n  private _tflite: any;\n  // tslint:disable-next-line no-unused-variable\n  private readonly _version: string = version;\n\n  constructor(options: BackgroundProcessorOptions) {\n    super();\n\n    if (typeof options.assetsPath !== 'string') {\n      throw new Error('assetsPath parameter is missing');\n    }\n    let assetsPath = options.assetsPath;\n    if (assetsPath && assetsPath[assetsPath.length - 1] !== '/') {\n      assetsPath += '/';\n    }\n\n    this.maskBlurRadius = options.maskBlurRadius!;\n    this._assetsPath = assetsPath;\n    this._debounce = typeof options.debounce === 'boolean' ? options.debounce : this._debounce;\n    this._debounceCount = this._debounce ? this._debounceCount : 1;\n    this._inferenceDimensions = options.inferenceDimensions! || this._inferenceDimensions;\n    this._historyCount = HISTORY_COUNT_MULTIPLIER * this._debounceCount;\n    this._personProbabilityThreshold = options.personProbabilityThreshold! || this._personProbabilityThreshold;\n    this._pipeline = options.pipeline! || this._pipeline;\n\n    this._benchmark = new Benchmark();\n    this._inputCanvas = document.createElement('canvas');\n    this._inputContext = this._inputCanvas.getContext('2d') as CanvasRenderingContext2D;\n    this._maskCanvas =  typeof window.OffscreenCanvas !== 'undefined' ? new window.OffscreenCanvas(1, 1) : document.createElement('canvas');\n    this._maskContext = this._maskCanvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    this._masks = [];\n  }\n\n  /**\n   * The current blur radius when smoothing out the edges of the person's mask.\n   */\n  get maskBlurRadius(): number {\n    return this._maskBlurRadius;\n  }\n\n  /**\n   * Set a new blur radius to be used when smoothing out the edges of the person's mask.\n   */\n  set maskBlurRadius(radius: number) {\n    if (typeof radius !== 'number' || radius < 0) {\n      console.warn(`Valid mask blur radius not found. Using ${MASK_BLUR_RADIUS} as default.`);\n      radius = MASK_BLUR_RADIUS;\n    }\n    this._maskBlurRadius = radius;\n  }\n\n  /**\n   * Load the segmentation model.\n   * Call this method before attaching the processor to ensure\n   * video frames are processed correctly.\n   */\n   async loadModel() {\n    const [tflite, modelResponse ] = await Promise.all([\n      this._loadTwilioTfLite(),\n      fetch(this._assetsPath + MODEL_NAME),\n    ]);\n\n    const model = await modelResponse.arrayBuffer();\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n    tflite._loadModel(model.byteLength);\n\n    this._inputMemoryOffset = tflite._getInputMemoryOffset() / 4;\n    this._outputMemoryOffset = tflite._getOutputMemoryOffset() / 4;\n\n    this._tflite = tflite;\n  }\n\n  /**\n   * Apply a transform to the background of an input video frame and leaving\n   * the foreground (person(s)) untouched. Any exception detected will\n   * result in the frame being dropped.\n   * @param inputFrameBuffer - The source of the input frame to process.\n   * <br/>\n   * <br/>\n   * [OffscreenCanvas](https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas) - Good for canvas-related processing\n   * that can be rendered off screen. Only works when using [[Pipeline.Canvas2D]].\n   * <br/>\n   * <br/>\n   * [HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement) - This is recommended on browsers\n   * that doesn't support `OffscreenCanvas`, or if you need to render the frame on the screen. Only works when using [[Pipeline.Canvas2D]].\n   * <br/>\n   * <br/>\n   * [HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement) - Recommended when using [[Pipeline.WebGL2]] but\n   * works for both [[Pipeline.Canvas2D]] and [[Pipeline.WebGL2]].\n   * <br/>\n   * @param outputFrameBuffer - The output frame buffer to use to draw the processed frame.\n   */\n  async processFrame(\n    inputFrameBuffer: OffscreenCanvas | HTMLCanvasElement | HTMLVideoElement,\n    outputFrameBuffer: HTMLCanvasElement\n  ): Promise<void> {\n    if (!this._tflite) {\n      return;\n    }\n    if (!inputFrameBuffer || !outputFrameBuffer) {\n      throw new Error('Missing input or output frame buffer');\n    }\n    this._benchmark.end('captureFrameDelay');\n    this._benchmark.start('processFrameDelay');\n\n    const { width: inferenceWidth, height: inferenceHeight } = this._inferenceDimensions;\n    let inputFrame = inputFrameBuffer;\n    let { width: captureWidth, height: captureHeight } = inputFrame;\n    if ((inputFrame as HTMLVideoElement).videoWidth) {\n      inputFrame = inputFrame as HTMLVideoElement;\n      captureWidth = inputFrame.videoWidth;\n      captureHeight = inputFrame.videoHeight;\n    }\n    if (this._outputCanvas !== outputFrameBuffer) {\n      this._outputCanvas = outputFrameBuffer;\n      this._outputContext = this._outputCanvas\n        .getContext(this._pipeline === Pipeline.Canvas2D ? '2d' : 'webgl2') as\n        CanvasRenderingContext2D | WebGL2RenderingContext;\n      this._webgl2Pipeline?.cleanUp();\n      this._webgl2Pipeline = null;\n    }\n\n    if (!this._webgl2Pipeline && this._pipeline === Pipeline.WebGL2) {\n      this._createWebGL2Pipeline(inputFrame as HTMLVideoElement, captureWidth, captureHeight, inferenceWidth, inferenceHeight);\n    }\n\n    if (this._pipeline === Pipeline.WebGL2) {\n      await this._webgl2Pipeline?.render();\n    } else {\n      // Only set the canvas' dimensions if they have changed to prevent unnecessary redraw\n      let reInitDummyImage = false;\n      if (this._inputCanvas.width !== inferenceWidth) {\n        this._inputCanvas.width = inferenceWidth;\n        this._maskCanvas.width = inferenceWidth;\n        reInitDummyImage = true;\n      }\n      if (this._inputCanvas.height !== inferenceHeight) {\n        this._inputCanvas.height = inferenceHeight;\n        this._maskCanvas.height = inferenceHeight;\n        reInitDummyImage = true;\n      }\n      if (reInitDummyImage) {\n        this._dummyImageData = new ImageData(\n          new Uint8ClampedArray(inferenceWidth * inferenceHeight * 4),\n          inferenceWidth, inferenceHeight);\n      }\n\n      const personMask = await this._createPersonMask(inputFrame);\n      const ctx = this._outputContext as CanvasRenderingContext2D;\n      this._benchmark.start('imageCompositionDelay');\n      this._maskContext.putImageData(personMask, 0, 0);\n      ctx.save();\n      ctx.filter = `blur(${this._maskBlurRadius}px)`;\n      ctx.globalCompositeOperation = 'copy';\n      ctx.drawImage(this._maskCanvas, 0, 0, captureWidth, captureHeight);\n      ctx.filter = 'none';\n      ctx.globalCompositeOperation = 'source-in';\n      ctx.drawImage(inputFrame, 0, 0, captureWidth, captureHeight);\n      ctx.globalCompositeOperation = 'destination-over';\n      this._setBackground(inputFrame);\n      ctx.restore();\n      this._benchmark.end('imageCompositionDelay');\n    }\n\n    this._benchmark.end('processFrameDelay');\n    this._benchmark.end('totalProcessingDelay');\n\n    // NOTE (csantos): Start the benchmark from here so we can include the delay from the Video sdk\n    // for a more accurate fps\n    this._benchmark.start('totalProcessingDelay');\n    this._benchmark.start('captureFrameDelay');\n  }\n\n  protected abstract _getWebGL2PipelineType(): WebGL2PipelineType;\n\n  protected abstract _setBackground(inputFrame: OffscreenCanvas | HTMLCanvasElement | HTMLVideoElement): void;\n\n  private _addMask(mask: Uint8ClampedArray | Uint8Array) {\n    if (this._masks.length >= this._historyCount) {\n      this._masks.splice(0, this._masks.length - this._historyCount + 1);\n    }\n    this._masks.push(mask);\n  }\n\n  private _applyAlpha(imageData: ImageData) {\n    const weightedSum = this._masks.reduce((sum, mask, j) => sum + (j + 1) * (j + 1), 0);\n    const pixels = imageData.height * imageData.width;\n    for (let i = 0; i < pixels; i++) {\n      const w = this._masks.reduce((sum, mask, j) => sum + mask[i] * (j + 1) * (j + 1), 0) / weightedSum;\n      imageData.data[i * 4 + 3] = Math.round(w * 255);\n    }\n  }\n\n  private async _createPersonMask(inputFrame: OffscreenCanvas | HTMLCanvasElement | HTMLVideoElement): Promise<ImageData> {\n    let imageData = this._dummyImageData;\n    const shouldRunInference = this._maskUsageCounter < 1;\n\n    this._benchmark.start('inputImageResizeDelay');\n    if (shouldRunInference) {\n      imageData = this._getResizedInputImageData(inputFrame);\n    }\n    this._benchmark.end('inputImageResizeDelay');\n\n    this._benchmark.start('segmentationDelay');\n    if (shouldRunInference) {\n      this._currentMask = this._runTwilioTfLiteInference(imageData);\n      this._maskUsageCounter = this._debounceCount;\n    }\n    this._addMask(this._currentMask);\n    this._applyAlpha(imageData);\n    this._maskUsageCounter--;\n    this._benchmark.end('segmentationDelay');\n\n    return imageData;\n  }\n\n  private _createWebGL2Pipeline(\n    inputFrame: HTMLVideoElement,\n    captureWidth: number,\n    captureHeight: number,\n    inferenceWidth: number,\n    inferenceHeight: number,\n  ): void {\n    this._webgl2Pipeline = buildWebGL2Pipeline(\n      {\n        htmlElement: inputFrame,\n        width: captureWidth,\n        height: captureHeight,\n      },\n      this._backgroundImage,\n      { type: this._getWebGL2PipelineType() },\n      { inputResolution: `${inferenceWidth}x${inferenceHeight}` },\n      this._outputCanvas!,\n      this._tflite,\n      this._benchmark,\n      this._debounce,\n    );\n    this._webgl2Pipeline.updatePostProcessingConfig({\n      smoothSegmentationMask: true,\n      jointBilateralFilter: {\n        sigmaSpace: 10,\n        sigmaColor: 0.12\n      },\n      coverage: [\n        0,\n        0.99\n      ],\n      lightWrapping: 0,\n      blendMode: 'screen'\n    });\n  }\n\n  private _getResizedInputImageData(inputFrame: OffscreenCanvas | HTMLCanvasElement | HTMLVideoElement): ImageData {\n    const { width, height } = this._inputCanvas;\n    this._inputContext.drawImage(inputFrame, 0, 0, width, height);\n    const imageData = this._inputContext.getImageData(0, 0, width, height);\n    return imageData;\n  }\n\n  private _loadJs(url: string): Promise<void> {\n    if (BackgroundProcessor._loadedScripts.includes(url)) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.onload = () => {\n        BackgroundProcessor._loadedScripts.push(url);\n        resolve();\n      };\n      script.onerror = reject;\n      document.head.append(script);\n      script.src = url;\n    });\n  }\n\n  private async _loadTwilioTfLite(): Promise<any> {\n    let tflite: any;\n    await this._loadJs(this._assetsPath + TFLITE_SIMD_LOADER_NAME);\n\n    try {\n      tflite = await window.createTwilioTFLiteSIMDModule();\n      this._isSimdEnabled = true;\n    } catch {\n      console.warn('SIMD not supported. You may experience poor quality of background replacement.');\n      await this._loadJs(this._assetsPath + TFLITE_LOADER_NAME);\n      tflite = await window.createTwilioTFLiteModule();\n      this._isSimdEnabled = false;\n    }\n    return tflite;\n  }\n\n  private _runTwilioTfLiteInference(inputImage: ImageData): Uint8ClampedArray {\n    const { _inferenceDimensions: { width, height }, _inputMemoryOffset: offset, _tflite: tflite } = this;\n    const pixels = width * height;\n\n    for (let i = 0; i < pixels; i++) {\n      tflite.HEAPF32[offset + i * 3] = inputImage.data[i * 4] / 255;\n      tflite.HEAPF32[offset + i * 3 + 1] = inputImage.data[i * 4 + 1] / 255;\n      tflite.HEAPF32[offset + i * 3 + 2] = inputImage.data[i * 4 + 2] / 255;\n    }\n\n    tflite._runInference();\n    const inferenceData = new Uint8ClampedArray(pixels * 4);\n\n    for (let i = 0; i < pixels; i++) {\n      const personProbability = tflite.HEAPF32[this._outputMemoryOffset + i];\n      inferenceData[i] = Number(personProbability >= this._personProbabilityThreshold) * personProbability;\n    }\n\n    return inferenceData;\n  }\n}\n"]}